Index: Be/Meeting-BE/src/main/java/org/example/meetingbe/config/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.meetingbe.config;\r\n\r\n\r\nimport org.example.meetingbe.security.jwt.JwtEntryPoint;\r\nimport org.example.meetingbe.security.jwt.JwtTokenFilter;\r\nimport org.example.meetingbe.security.userpricipal.CustomUserDetailsService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class WebSecurityConfig {\r\n    @Autowired\r\n    private CustomUserDetailsService customUserDetailsService;\r\n\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n\r\n    @Autowired\r\n    private JwtEntryPoint jwtEntryPoint;\r\n\r\n    @Bean\r\n    public JwtTokenFilter jwtTokenFilter() {\r\n        return new JwtTokenFilter();\r\n    }\r\n\r\n    @Bean\r\n    public DaoAuthenticationProvider authenticationProvider() {\r\n        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();\r\n        authProvider.setUserDetailsService(userDetailsService);\r\n        authProvider.setPasswordEncoder(passwordEncoder());\r\n        return authProvider;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http.cors().and().csrf().disable()\r\n                .exceptionHandling().authenticationEntryPoint(jwtEntryPoint).and()\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                .authorizeRequests().requestMatchers(\"api/login\", \"api/register\",\"/**\").permitAll()\r\n                .anyRequest().authenticated();\r\n        http.authenticationProvider(authenticationProvider());\r\n        http.addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\r\n        return authConfig.getAuthenticationManager();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Be/Meeting-BE/src/main/java/org/example/meetingbe/config/WebSecurityConfig.java b/Be/Meeting-BE/src/main/java/org/example/meetingbe/config/WebSecurityConfig.java
--- a/Be/Meeting-BE/src/main/java/org/example/meetingbe/config/WebSecurityConfig.java	
+++ b/Be/Meeting-BE/src/main/java/org/example/meetingbe/config/WebSecurityConfig.java	
@@ -52,7 +52,7 @@
                 .exceptionHandling().authenticationEntryPoint(jwtEntryPoint).and()
                 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
                 .authorizeRequests().requestMatchers("api/login", "api/register","/**").permitAll()
-                .anyRequest().authenticated();
+                ;
         http.authenticationProvider(authenticationProvider());
         http.addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
         return http.build();
